"""
交易程序导出模块
提供持仓、成交、委托数据导出功能
"""

import win32api
import win32con
import win32gui
import time
from trader_core import (
    switch_to_trading_software,
    clear_and_type,
    send_key_fast,
    generate_unique_filename,
    cleanup_old_export_files,
    get_current_focus,
    click_center_area,
    click_table_area,
    ensure_caps_lock_on
)

def export_data_generic(page_key, page_name, file_prefix):
    """
    通用导出数据函数
    
    Args:
        page_key (int): 页面切换按键码 (W=0x57, E=0x45, R=0x52)
        page_name (str): 页面名称
        file_prefix (str): 文件名前缀
    
    Returns:
        bool: 操作是否成功
    """
    print(f"\n📊 导出{page_name}")
    print("-" * 40)

    # 清理过期文件
    cleanup_old_export_files()

    # 自动切换到交易软件
    if not switch_to_trading_software():
        print("❌ 无法切换到交易软件，请手动点击交易软件窗口后重试")
        return False

    try:
        # 1. 强制确保焦点在交易软件
        print("1. 强制确保焦点在交易软件...")
        for i in range(3):  # 尝试3次
            current_hwnd = win32gui.GetForegroundWindow()
            current_title = win32gui.GetWindowText(current_hwnd)
            print(f"   第{i+1}次检查，当前窗口: {current_title}")

            if "交易" in current_title or "股票" in current_title:
                print("   ✅ 焦点在交易软件")
                break
            else:
                print("   ❌ 焦点不在交易软件，重新切换...")
                if not switch_to_trading_software():
                    print("   切换失败，继续尝试...")
                time.sleep(0.5)

        # 2. 点击中央区域获取焦点
        print("2. 点击中央区域获取焦点...")
        click_center_area()

        # 3. 确保Caps Lock开启
        print("3. 确保Caps Lock开启...")
        ensure_caps_lock_on()

        # 4. 等待状态稳定
        time.sleep(0.5)

        # 5. 发送页面切换键
        print(f"5. 发送{chr(page_key)}键切换到{page_name}...")
        win32api.keybd_event(page_key, 0, 0, 0)
        win32api.keybd_event(page_key, 0, win32con.KEYEVENTF_KEYUP, 0)
        time.sleep(0.1)  # 等待0.1秒后开始导出
        print(f"   {chr(page_key)}键发送完成")

        print(f"   等待{page_name}页面加载完成...")

        # 6. 生成文件名
        filename = generate_unique_filename(file_prefix)
        print(f"文件名: {filename}")

        # 7. 点击表格区域
        print("7. 点击表格区域...")
        click_table_area()
        time.sleep(0.1)

        # 8. 按Ctrl+S导出
        print("8. 按Ctrl+S导出...")
        win32api.keybd_event(win32con.VK_CONTROL, 0, 0, 0)  # Ctrl按下
        time.sleep(0.01)
        win32api.keybd_event(ord('S'), 0, 0, 0)  # S键按下
        time.sleep(0.01)
        win32api.keybd_event(ord('S'), 0, win32con.KEYEVENTF_KEYUP, 0)  # S键释放
        time.sleep(0.01)
        win32api.keybd_event(win32con.VK_CONTROL, 0, win32con.KEYEVENTF_KEYUP, 0)  # Ctrl释放
        time.sleep(0.5)  # 等待导出对话框

        # 9. 输入文件名
        print("9. 输入文件名...")
        clear_and_type(filename)
        time.sleep(0.5)

        # 10. 按回车保存
        print("10. 按回车保存...")
        send_key_fast(win32con.VK_RETURN)
        time.sleep(2.0)  # 等待文件保存

        # 11. 按N关闭确认对话框
        print("11. 按N关闭确认对话框...")
        win32api.keybd_event(0x4E, 0, 0, 0)  # N键按下
        win32api.keybd_event(0x4E, 0, win32con.KEYEVENTF_KEYUP, 0)  # N键释放
        time.sleep(0.3)

        print(f"✅ {page_name}导出完成!")
        return True

    except Exception as e:
        print(f"❌ {page_name}导出失败: {e}")
        return False

def export_holdings():
    """
    导出持仓数据
    
    Returns:
        bool: 操作是否成功
    """
    return export_data_generic(0x57, "持仓数据", "持仓数据")  # W键

def export_transactions():
    """
    导出成交数据
    
    Returns:
        bool: 操作是否成功
    """
    return export_data_generic(0x45, "成交数据", "成交数据")  # E键

def export_orders():
    """
    导出委托数据
    
    Returns:
        bool: 操作是否成功
    """
    return export_data_generic(0x52, "委托数据", "委托数据")  # R键

def export_all_data():
    """
    导出所有数据（持仓、成交、委托）
    
    Returns:
        dict: 各项导出结果
    """
    print("\n🎯 导出所有数据")
    print("=" * 50)
    
    results = {
        "holdings": False,
        "transactions": False,
        "orders": False
    }
    
    # 导出持仓数据
    print("\n📊 1/3 导出持仓数据...")
    results["holdings"] = export_holdings()
    time.sleep(1.0)
    
    # 导出成交数据
    print("\n📊 2/3 导出成交数据...")
    results["transactions"] = export_transactions()
    time.sleep(1.0)
    
    # 导出委托数据
    print("\n📊 3/3 导出委托数据...")
    results["orders"] = export_orders()
    
    # 总结
    success_count = sum(results.values())
    print(f"\n✅ 导出完成! 成功: {success_count}/3")
    
    for data_type, success in results.items():
        status = "✅" if success else "❌"
        print(f"   {status} {data_type}")
    
    return results

def get_export_files():
    """
    获取当前目录下的导出文件列表
    
    Returns:
        dict: 按类型分组的文件列表
    """
    import glob
    
    files = {
        "holdings": glob.glob("持仓数据_*.csv"),
        "transactions": glob.glob("成交数据_*.csv"),
        "orders": glob.glob("委托数据_*.csv")
    }
    
    return files

# 测试函数
if __name__ == "__main__":
    print("🧪 测试导出模块")
    
    # 测试单个导出
    print("\n=== 测试持仓导出 ===")
    result = export_holdings()
    print(f"持仓导出结果: {result}")
    
    # 测试获取文件列表
    print("\n=== 获取导出文件 ===")
    files = get_export_files()
    for file_type, file_list in files.items():
        print(f"{file_type}: {len(file_list)} 个文件")
        for file in file_list[:3]:  # 只显示前3个
            print(f"  - {file}")
