/**
 * Mock AI Recommendations
 * Provides mock responses for AI-related API endpoints
 */

// Generate a random confidence score
const getRandomConfidence = (min = 0.65, max = 0.95) => {
  return parseFloat((Math.random() * (max - min) + min).toFixed(2));
};

// Generate a realistic looking price based on current price
const getStrategicPrice = (currentPrice, action) => {
  // For buys: slightly below current price
  // For sells: slightly above current price
  const variance = currentPrice * (Math.random() * 0.02 + 0.005);
  
  if (action === 'buy') {
    return parseFloat((currentPrice - variance).toFixed(2));
  } else {
    return parseFloat((currentPrice + variance).toFixed(2));
  }
};

// Smart price for opportunity detection
const detectOpportunityPrice = (stockInfo) => {
  const { intraday_high, intraday_low, current_price, avg_volume, current_volume } = stockInfo;
  
  // Price range for the day
  const range = intraday_high - intraday_low;
  
  // Calculate relative position in the day's range
  const position = (current_price - intraday_low) / range;
  
  // Volume ratio (current to average)
  const volumeRatio = current_volume / (avg_volume || 1);
  
  // Decision logic
  if (position < 0.35 && volumeRatio > 1.2) {
    // Low in range with high volume = buy opportunity
    return {
      action: 'buy',
      confidence: getRandomConfidence(0.75, 0.9),
      reason: 'Price near daily low with increased volume suggests accumulation'
    };
  } else if (position > 0.8 && volumeRatio > 1.5) {
    // High in range with very high volume = sell opportunity
    return {
      action: 'sell',
      confidence: getRandomConfidence(0.8, 0.95),
      reason: 'Price near daily high with substantial volume suggests distribution'
    };
  } else if (position > 0.6 && volumeRatio < 0.8) {
    // High in range with decreasing volume = potential sell
    return {
      action: 'sell',
      confidence: getRandomConfidence(0.7, 0.85),
      reason: 'Price rising on decreasing volume suggests weakening momentum'
    };
  } else if (position < 0.4 && volumeRatio < 0.7) {
    // Low in range with low volume = potential buy
    return {
      action: 'buy',
      confidence: getRandomConfidence(0.65, 0.8),
      reason: 'Decreasing volume at support level suggests selling pressure is easing'
    };
  } else {
    // No clear opportunity
    return {
      action: 'hold',
      confidence: getRandomConfidence(0.6, 0.75),
      reason: 'No clear trading signals at this time'
    };
  }
};

// Mock AI API handlers
export default {
  // Get AI recommendation
  getRecommendation: (stockInfo) => {
    const opportunity = detectOpportunityPrice(stockInfo);
    
    // Calculate quantity based on price and fixed amount
    const recommendedAmount = 20000; // Around $20k per trade
    const quantity = Math.floor(recommendedAmount / stockInfo.current_price / 100) * 100;
    
    const recommendedPrice = opportunity.action !== 'hold' 
      ? getStrategicPrice(stockInfo.current_price, opportunity.action)
      : stockInfo.current_price;
    
    return {
      code: 200,
      message: 'success',
      data: {
        stock_code: stockInfo.code,
        stock_name: stockInfo.name,
        action: opportunity.action,
        price: recommendedPrice,
        quantity: quantity,
        confidence: opportunity.confidence,
        message: opportunity.action === 'hold'
          ? 'Hold position, no clear trading signals at present'
          : `Recommend to ${opportunity.action} ${quantity} shares at Â¥${recommendedPrice}`,
        reason: opportunity.reason,
        timestamp: new Date().toISOString()
      }
    };
  },
  
  // Train AI model
  trainModel: () => {
    // Simulate a delay for training (2-5 seconds)
    const trainingTime = Math.floor(Math.random() * 3000) + 2000;
    
    // Generate random improvements
    const previousAccuracy = (Math.random() * 0.1 + 0.65).toFixed(4);
    const newAccuracy = (parseFloat(previousAccuracy) + Math.random() * 0.05).toFixed(4);
    
    const trainingResult = {
      previous_accuracy: previousAccuracy,
      new_accuracy: newAccuracy,
      improvement: ((newAccuracy - previousAccuracy) / previousAccuracy * 100).toFixed(2) + '%',
      samples_used: Math.floor(Math.random() * 5000) + 1000,
      training_time: trainingTime + 'ms'
    };
    
    return {
      code: 200,
      message: 'AI model trained successfully',
      data: {
        status: 'success',
        model_version: Date.now().toString(),
        training_result: trainingResult,
        last_trained: new Date().toISOString()
      }
    };
  }
}; 
 