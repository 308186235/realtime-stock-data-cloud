# 智能交易Agent系统

智能交易Agent是一个自主决策、风险管理和执行交易的AI系统，能够分析市场数据、评估风险并做出最优交易决策。

## 系统架构

```
                      ┌─────────────┐
                      │  前端界面   │
                      └──────┬──────┘
                             │
                      ┌──────┴──────┐
                      │   API接口   │
                      └──────┬──────┘
                             │
             ┌───────────────┼───────────────┐
             │               │               │
      ┌──────┴──────┐ ┌──────┴──────┐ ┌─────┴──────┐
      │  市场分析器  │ │  决策引擎   │ │ 风险管理器 │
      └──────┬──────┘ └──────┬──────┘ └─────┬──────┘
             │               │               │
             └───────────────┼───────────────┘
                             │
                      ┌──────┴──────┐
                      │  策略融合器  │
                      └──────┬──────┘
                             │
                      ┌──────┴──────┐
                      │  执行引擎   │
                      └─────────────┘
```

## 核心功能

- **市场状态识别**: 自动分析市场状态、趋势和异常
- **多策略融合**: 整合多种交易策略的信号，生成更可靠的决策
- **风险自适应**: 根据市场风险动态调整交易策略和仓位
- **智能决策引擎**: 基于市场分析、风险评估和策略信号生成最优决策
- **完整API接口**: 提供RESTful和WebSocket接口，方便集成

## 快速开始

### 安装依赖

```bash
pip install -r backend/requirements.txt
```

### 配置系统

编辑 `config/agent_config.json` 文件，根据需要调整参数：

```json
{
    "agent": {
        "name": "MasterTradingAgent",
        "loop_interval": 60
    },
    "decision_engine": {
        "confidence_thresholds": {
            "execute": 0.65
        }
    }
    // 其他配置...
}
```

### 启动Agent

Windows:
```
start_agent.bat
```

Linux/macOS:
```bash
python test_agent_system.py --config=config/agent_config.json
```

## 系统组件

### 市场分析器 (MarketAnalyzer)

市场分析器负责分析市场状态、识别趋势和检测异常：

- 识别8种市场状态（牛市趋势、熊市震荡等）
- 计算波动率、趋势强度等关键指标
- 检测市场异常和异常价格行为
- 生成短期和中期市场预测

### 风险管理器 (RiskManager)

风险管理器负责评估和控制交易风险：

- 市场风险评估（VaR、波动率等）
- 投资组合风险评估（集中度、杠杆等）
- 头寸风险评估（止损、暴露等）
- 流动性风险评估
- 生成风险控制建议

### 决策引擎 (DecisionEngine)

决策引擎负责整合各种信息，生成最终交易决策：

- 评估各策略信号
- 检查决策约束条件
- 生成买入、卖出或持有决策
- 计算最优仓位大小
- 提供决策解释和置信度

### 策略融合器 (StrategyFusion)

策略融合器负责整合多种交易策略的信号：

- 支持加权平均、多数投票等融合方法
- 动态调整策略权重
- 层次化融合（先在策略组内融合，再组间融合）
- 计算信号一致性和强度

### Agent API

提供与外部系统交互的接口：

- RESTful API
- WebSocket实时通信
- 支持获取状态、生成决策、执行操作等功能

## API参考

### REST API端点

| 端点 | 方法 | 描述 |
|------|------|------|
| `/agent/status` | GET | 获取Agent状态 |
| `/agent/start` | POST | 启动Agent |
| `/agent/stop` | POST | 停止Agent |
| `/agent/decision` | POST | 生成交易决策 |
| `/agent/execute` | POST | 执行交易动作 |
| `/agent/signals` | GET | 获取最新信号 |
| `/agent/metrics` | GET | 获取性能指标 |

### WebSocket

连接到 `ws://host:port/agent/ws` 获取实时更新。

消息格式：
```json
{
    "type": "status_update",
    "timestamp": "2023-05-21T10:15:30.123Z",
    "data": {
        // 状态数据
    }
}
```

## 高级配置

### 市场分析器配置

```json
"market_analyzer": {
    "volatility_thresholds": {
        "low": 0.008,
        "high": 0.020
    },
    "trend_thresholds": {
        "weak": 0.3,
        "strong": 0.6
    }
}
```

### 风险管理器配置

```json
"risk_manager": {
    "risk_thresholds": {
        "low": 0.10,
        "medium": 0.20,
        "high": 0.30
    },
    "max_risk_exposure": {
        "total_portfolio": 0.5,
        "single_position": 0.15
    }
}
```

### 策略权重配置

```json
"strategy_fusion": {
    "strategy_weights": {
        "momentum": 0.20,
        "mean_reversion": 0.20,
        "trend_following": 0.20,
        "breakout": 0.15,
        "volatility": 0.10,
        "fundamental": 0.10,
        "sentiment": 0.05
    }
}
```

## 性能指标

系统会计算并记录以下性能指标：

- **胜率**: 盈利交易占总交易的比例
- **盈亏比**: 平均盈利与平均亏损的比值
- **夏普比率**: 风险调整后的收益率
- **最大回撤**: 最大下跌幅度
- **交易频率**: 每天/每周的平均交易次数

## 开发指南

### 添加新策略

1. 创建新策略类
2. 实现`generate_signals`方法
3. 在策略融合器中注册策略

### 定制风险控制

1. 在`risk_manager.py`中添加新的风险评估方法
2. 在配置文件中调整风险阈值

### 改进决策引擎

1. 修改`decision_engine.py`中的决策生成逻辑
2. 调整决策因素权重

## 故障排除

**问题**: Agent无法启动
**解决**: 检查配置文件格式，确保所有依赖已安装

**问题**: 决策生成但不执行
**解决**: 检查决策置信度是否达到执行阈值，默认为0.65

**问题**: 市场分析器返回错误
**解决**: 确保提供了正确格式的市场数据

## 更新日志

**v1.0.0**
- 初始版本
- 完整的市场分析、决策和风险管理功能
- REST和WebSocket API支持 