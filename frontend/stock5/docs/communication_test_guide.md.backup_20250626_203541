# 前后端通信测试指南

本文档提供了测试前后端通信的多种方法和工具，帮助开发人员验证API接口和实时数据流的正确性。

## 测试方法概述

我们提供了三种测试前后端通信的方法：

1. **通过内置的通信测试页面** - 使用Vue组件进行测试
2. **通过独立的HTML测试页面** - 不依赖于Vue框架的纯HTML/JS测试工具
3. **通过命令行工具** - 使用脚本进行自动化测试

## 1. 使用通信测试页面

我们在应用中内置了一个专门用于测试前后端通信的页面。

### 访问测试页面

通过以下方式访问测试页面：

- 在应用中点击底部导航栏的"测试"选项
- 或直接访问路径: `/pages/test/CommunicationTest`

### 页面功能

测试页面包含三个主要功能区：

#### HTTP 请求测试

- 支持GET和POST请求方法
- 预设多种API端点
- 可配置请求参数和请求体
- 显示响应结果和耗时

#### WebSocket 测试

- 连接/断开WebSocket
- 订阅/取消订阅特定频道
- 显示接收到的实时消息
- 支持股票行情等实时数据订阅

#### Mock 数据测试

- 启用/禁用Mock数据
- 测试Mock接口响应
- 模拟真实环境下的数据结构

### 使用方法

1. 选择HTTP测试区域中的请求方法和API端点
2. 填写必要的参数或编辑请求体
3. 点击"发送请求"按钮
4. 查看响应结果和响应时间

对于WebSocket测试：

1. 点击"连接"按钮建立WebSocket连接
2. 填写要订阅的频道和参数
3. 点击"订阅"按钮
4. 观察实时接收到的消息

## 2. 使用独立HTML测试页面

对于不想运行完整应用的情况，我们提供了一个独立的HTML测试页面。

### 访问方式

该页面位于 `static/api_test.html`，可以直接在浏览器中打开，不需要启动完整的应用。

### 功能特点

- 不依赖于Vue框架或其他库
- 纯HTML/JavaScript实现
- 可自定义后端服务URL
- 支持同样的HTTP和WebSocket测试功能

### 使用方法

1. 在浏览器中打开该HTML文件
2. 配置"API Base URL"为你的后端服务地址
3. 按照界面提示进行API测试

## 3. 使用命令行工具

对于自动化测试或需要批量测试的场景，我们提供了命令行测试脚本。

### 命令行测试脚本

位于 `backend/tests/test_api.py` 的Python脚本可以自动化测试后端API。

### 运行方式

```bash
cd backend
python tests/test_api.py
```

### 功能特点

- 自动测试所有API端点
- 测试WebSocket连接和订阅
- 彩色输出测试结果
- 详细的错误信息

## 测试环境配置

### 简化版测试服务器

为了方便测试，我们提供了一个简化版的测试服务器，位于 `backend/simple_server.py`。这个服务器实现了所有需要测试的API端点，但不依赖于完整的后端服务。

运行方式：

```bash
cd backend
python simple_server.py
```

该服务器会在 http://localhost:8000 启动，提供以下测试端点：

- `/api/test/ping` - 简单的ping测试
- `/api/test/echo` - 回显消息
- `/api/test/stock` - 股票数据
- `/api/test/delay` - 延迟响应
- `/api/stock/quote` - 股票行情
- `/api/t-trading/summary` - 交易摘要
- `/api/t-trading/evaluate-opportunity` - 评估交易机会
- `/api/t-trading/record-trade` - 记录交易

还提供了WebSocket端点：

- `ws://localhost:8000/api/test/ws` - WebSocket测试

## 常见问题

### 连接问题

如果无法连接到后端服务，请检查：

1. 后端服务是否正在运行
2. 端口是否正确（默认8000）
3. 防火墙设置是否允许连接
4. 跨域(CORS)配置是否正确

### 数据格式问题

如果收到格式错误的响应：

1. 检查请求参数是否正确
2. 检查请求体JSON格式是否有效
3. 查看后端日志以获取详细错误信息

## 结论

通过这些测试工具和方法，开发人员可以全面测试前后端通信，确保：

1. API接口功能正常
2. 数据格式符合预期
3. 实时数据流传输正常
4. 错误处理机制有效

根据具体需求选择合适的测试方法，可以提高开发效率和系统质量。 
 