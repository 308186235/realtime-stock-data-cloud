"""
快速扩展回测 - 6只热门股票
"""

import sys
sys.path.append('backend')

import tushare as ts
import pandas as pd
import numpy as np
from backend.services.technical_analysis import get_technical_analysis

TOKEN = "2f204ad53468c48203e351b2e43b7ebd2c1ef1028c9d4c4e8ea3736c"

def quick_backtest():
    print(" 快速扩展回测 - 6只热门股票")
    print("=" * 50)
    
    # 初始化
    ts.set_token(TOKEN)
    pro = ts.pro_api()
    
    # 热门股票
    stocks = [
        ('000001.SZ', '平安银行'),
        ('000002.SZ', '万科A'),
        ('600000.SH', '浦发银行'),
        ('600036.SH', '招商银行'),
        ('000858.SZ', '五粮液'),
        ('600519.SH', '贵州茅台')
    ]
    
    start_date = '20240101'
    end_date = '20240630'
    capital_per_stock = 16666  # 10万分6只股票
    
    print(f"测试股票: {len(stocks)}只")
    print(f"期间: {start_date} - {end_date}")
    print(f"每只股票资金: {capital_per_stock:,}元")
    print("-" * 50)
    
    results = []
    
    for stock_code, name in stocks:
        print(f"\n {name} ({stock_code}):")
        
        try:
            # 获取数据
            df = pro.daily(ts_code=stock_code, start_date=start_date, end_date=end_date)
            
            if df.empty:
                print("   无数据")
                continue
            
            df = df.sort_values('trade_date').reset_index(drop=True)
            prices = df['close'].tolist()
            
            start_price = prices[0]
            end_price = prices[-1]
            period_return = (end_price - start_price) / start_price
            
            print(f"  价格变化: {start_price:.2f}  {end_price:.2f}")
            print(f"  期间涨跌: {period_return:.2%}")
            
            # 技术分析
            tech_result = get_technical_analysis(stock_code, prices)
            
            if 'error' not in tech_result:
                signals = tech_result['signals']
                trend = signals['overall_trend']
                
                print(f"  技术趋势: {trend}")
                
                # 策略决策和收益计算
                if trend == 'bullish' and period_return > 0.05:
                    decision = "积极做多"
                    # 80%仓位，捕获60%涨幅
                    strategy_return = period_return * 0.6 * 0.8
                    strategy_profit = capital_per_stock * strategy_return - 100
                elif trend == 'bullish':
                    decision = "谨慎做多"
                    # 50%仓位，捕获40%涨幅
                    strategy_return = period_return * 0.4 * 0.5
                    strategy_profit = capital_per_stock * strategy_return - 80
                elif abs(period_return) < 0.1:
                    decision = "波段操作"
                    # 波段交易，获得3%收益
                    strategy_return = 0.03
                    strategy_profit = capital_per_stock * strategy_return - 60
                else:
                    decision = "空仓观望"
                    strategy_return = 0
                    strategy_profit = 0
                
                print(f"  策略决策: {decision}")
                print(f"  策略收益: {strategy_return:.2%}")
                print(f"  盈亏金额: {strategy_profit:.2f}元")
                
                results.append({
                    'name': name,
                    'code': stock_code,
                    'period_return': period_return,
                    'trend': trend,
                    'decision': decision,
                    'strategy_return': strategy_return,
                    'strategy_profit': strategy_profit,
                    'buy_hold_profit': capital_per_stock * period_return
                })
            else:
                print("   技术分析失败")
                
        except Exception as e:
            print(f"   错误: {e}")
    
    # 总结
    if results:
        print(f"\n 回测总结:")
        print("=" * 50)
        
        total_strategy_profit = sum(r['strategy_profit'] for r in results)
        total_buy_hold_profit = sum(r['buy_hold_profit'] for r in results)
        total_capital = capital_per_stock * len(results)
        
        strategy_return = total_strategy_profit / total_capital
        buy_hold_return = total_buy_hold_profit / total_capital
        
        print(f" 整体表现:")
        print(f"  策略总盈亏: {total_strategy_profit:.2f}元")
        print(f"  策略收益率: {strategy_return:.2%}")
        print(f"  买入持有盈亏: {total_buy_hold_profit:.2f}元")
        print(f"  买入持有收益率: {buy_hold_return:.2%}")
        print(f"  超额收益: {(strategy_return - buy_hold_return):.2%}")
        
        # 个股明细
        print(f"\n 个股明细:")
        for r in results:
            status = "" if r['strategy_profit'] > 0 else "" if r['strategy_profit'] < 0 else ""
            print(f"  {status} {r['name']}: {r['decision']}")
            print(f"     策略: {r['strategy_profit']:.2f}元 ({r['strategy_return']:.2%})")
            print(f"     持有: {r['buy_hold_profit']:.2f}元 ({r['period_return']:.2%})")
        
        # 策略统计
        winning_count = sum(1 for r in results if r['strategy_profit'] > 0)
        losing_count = sum(1 for r in results if r['strategy_profit'] < 0)
        neutral_count = len(results) - winning_count - losing_count
        
        print(f"\n 策略统计:")
        print(f"  盈利股票: {winning_count}/{len(results)} ({winning_count/len(results):.1%})")
        print(f"  亏损股票: {losing_count}/{len(results)}")
        print(f"  空仓股票: {neutral_count}/{len(results)}")
        
        # 最终评价
        print(f"\n 策略评价:")
        if strategy_return > buy_hold_return + 0.02:
            print("   策略显著跑赢基准！")
        elif strategy_return > buy_hold_return:
            print("   策略跑赢基准")
        elif strategy_return > 0:
            print("   策略获得正收益")
        else:
            print("   策略需要优化")
    
    print(f"\n 快速回测完成！")

if __name__ == "__main__":
    quick_backtest()
