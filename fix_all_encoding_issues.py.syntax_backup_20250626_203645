#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
修复项目中所有编码问题,包括BOM字符,特殊字符等
"""

import os
import re
import shutil
from datetime import datetime

def fix_file_encoding_issues(file_path):
    """修复单个文件的所有编码问题"""
    try:
        # 尝试不同的编码读取文件
        content = None
        encoding_used = None
        
        for encoding in ['utf-8-sig', 'utf-8', 'gbk', 'gb2312', 'latin1']:
            try:
                with open(file_path, 'r', encoding=encoding) as f:
                    content = f.read()
                    encoding_used = encoding
                    break
            except:
                continue
        
        if content is None:
            print(f"❌ 无法读取文件: {file_path}")
            return False
        
        original_content = content
        
        # 1. 移除BOM字符
        if content.startswith('\ufeff'):
            content = content[1:]
            print(f"🔧 移除BOM字符: {file_path}")
        
        # 2. 移除null字节
        if '\x00' in content:
            content = content.replace('\x00', '')
            print(f"🔧 移除null字节: {file_path}")
        
        # 3. 修复中文标点符号
        content = content.replace(',', ',')  # 中文逗号 -> 英文逗号
        content = content.replace(',', ',')  # 中文顿号 -> 英文逗号
        content = content.replace('"', '"')  # 中文左双引号
        content = content.replace('"', '"')  # 中文右双引号
        content = content.replace(''''''', "'")  # 中文右单引号
        content = content.replace('(', '(')  # 中文左括号
        content = content.replace(')', ')')  # 中文右括号
        content = content.replace(':', ':')  # 中文冒号
        content = content.replace(';', ';')  # 中文分号
        content = content.replace('?', '?')  # 中文问号
        content = content.replace('!', '!')  # 中文感叹号
        
        # 4. 移除其他特殊Unicode字符
        # 移除零宽字符
        content = re.sub(r'[\u200b-\u200f\u2028-\u202f\u205f-\u206f\ufeff]', '', content)
        
        # 移除控制字符(保留换行符,制表符,回车符)
        content = re.sub(r'[\x00-\x08\x0b\x0c\x0e-\x1f\x7f-\x9f]', '', content)
        
        # 5. 修复常见的编码错误字符
        replacements = {
            '\ue511': '',  # 特殊字符
            '\ue750': '',
            '\ue5c5': '',
            '\ue752': '',
            '\ufe3f': '',
            '\u2033': '',
            '\ue6ed': '',
            '\uff0c': ',',  # 全角逗号
            '\u3001': ',',  # 中文顿号
            '\uff08': '(',  # 全角左括号
            '\uff09': ')',  # 全角右括号
            '\uff1a': ':',  # 全角冒号
            '\uff1b': ';',  # 全角分号
            '\uff1f': '?',  # 全角问号
            '\uff01': '!',  # 全角感叹号
        }
        
        for wrong, correct in replacements.items():
            content = content.replace(wrong, correct)
        
        # 6. 修复缩进问题(统一使用4个空格)
        lines = content.split('\n')
        fixed_lines = []
        
        for line in lines:
            # 将制表符转换为4个空格
            line = line.expandtabs(4)
            fixed_lines.append(line)
        
        content = '\n'.join(fixed_lines)
        
        # 7. 确保文件以换行符结尾
        if content and not content.endswith('\n'):
            content += '\n'
        
        # 如果内容有变化,则保存
        if content != original_content:
            # 备份原文件
            backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            shutil.copy2(file_path, backup_path)
            
            # 保存修复后的文件(使用UTF-8编码)
            with open(file_path, 'w', encoding='utf-8', newline='') as f:
                f.write(content)
            
            print(f"✅ 修复文件: {file_path}")
            return True
        else:
            return False
            
    except Exception as e:
        print(f"❌ 修复失败 {file_path}: {e}")
        return False

def scan_and_fix_all_files():
    """扫描并修复所有文件"""
    print("🔍 开始扫描并修复所有编码问题...")
    
    # 需要检查的文件扩展名
    extensions = ['.py', '.js', '.vue', '.json', '.md', '.txt', '.csv', '.yml', '.yaml']
    
    # 需要跳过的目录
    skip_dirs = {
        '__pycache__', '.git', 'node_modules', '.vscode', 
        'backup_deleted_20250624_224708', 'logs', 'models', 'venv',
        'unpackage', 'dist'
    }
    
    fixed_files = []
    error_files = []
    
    # 遍历项目目录
    for root, dirs, files in os.walk('.'):
        # 跳过指定目录
        dirs[:] = [d for d in dirs if d not in skip_dirs]
        
        for file in files:
            # 检查文件扩展名
            if any(file.endswith(ext) for ext in extensions):
                file_path = os.path.join(root, file)
                
                try:
                    if fix_file_encoding_issues(file_path):
                        fixed_files.append(file_path)
                except Exception as e:
                    error_files.append((file_path, str(e)))
    
    # 输出结果
    print(f"\n📊 修复结果:")
    print(f"✅ 成功修复: {len(fixed_files)} 个文件")
    print(f"❌ 修复失败: {len(error_files)} 个文件")
    
    if fixed_files:
        print(f"\n✅ 已修复的文件:")
        for file_path in fixed_files[:20]:  # 只显示前20个
            print(f"  - {file_path}")
        if len(fixed_files) > 20:
            print(f"  ... 还有 {len(fixed_files) - 20} 个文件")
    
    if error_files:
        print(f"\n❌ 修复失败的文件:")
        for file_path, error in error_files[:10]:  # 只显示前10个
            print(f"  - {file_path}: {error}")
        if len(error_files) > 10:
            print(f"  ... 还有 {len(error_files) - 10} 个文件")

def main():
    """主函数"""
    print("=" * 60)
    print("项目编码问题全面修复工具")
    print("=" * 60)
    
    scan_and_fix_all_files()
    
    print("\n🎉 编码修复完成!")
    print("\n💡 建议:")
    print("1. 运行 python check_missing_dependencies.py 重新检查依赖")
    print("2. 测试关键功能是否正常工作")
    print("3. 如有问题,可以从备份文件恢复")

if __name__ == "__main__":
    main()
