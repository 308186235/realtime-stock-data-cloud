from fastapi import APIRouter, Depends, HTTPException, Query, BackgroundTasks
from typing import Dict, List, Optional, Any
from pydantic import BaseModel, Field
import logging
import json
import time
import random
from datetime import datetime, timedelta

from ..services.trading_service import trading_service

router = APIRouter(prefix="/trading", tags=["trading"])

# 模型定义
class OrderRequest(BaseModel):
    symbol: str = Field(..., description="证券代码")
    price: float = Field(..., description="委托价格")
    volume: int = Field(..., description="委托数量")
    direction: str = Field(..., description="交易方向，'BUY'或'SELL'")
    order_type: Optional[str] = Field("LIMIT", description="订单类型，'LIMIT'(限价)或'MARKET'(市价)")

class CancelOrderRequest(BaseModel):
    order_id: str = Field(..., description="委托编号")

class ConnectRequest(BaseModel):
    broker_type: Optional[str] = Field(None, description="券商类型，如'QMT_DONGWU'或'PTRADE_DONGWU'")
    account_id: Optional[str] = Field(None, description="账号，不填则使用配置")
    account_pwd: Optional[str] = Field(None, description="密码，不填则使用配置")
    server_ip: Optional[str] = Field(None, description="服务器IP，仅部分券商需要")
    server_port: Optional[int] = Field(None, description="服务器端口，仅部分券商需要")


# API路由
@router.get("/brokers", response_model=List[Dict])
async def get_supported_brokers():
    """获取所有支持的券商类型"""
    return trading_service.get_supported_brokers()

@router.post("/connect", response_model=Dict)
async def connect(request: ConnectRequest):
    """连接到交易服务"""
    # 过滤掉None值参数
    params = {k: v for k, v in request.dict().items() if v is not None}
    result = trading_service.connect(**params)
    
    if not result.get("success", False):
        raise HTTPException(status_code=400, detail=result.get("message", "连接交易服务失败"))
    
    return result

@router.post("/disconnect", response_model=Dict)
async def disconnect():
    """断开交易服务连接"""
    result = trading_service.disconnect()
    
    if not result.get("success", False):
        raise HTTPException(status_code=400, detail=result.get("message", "断开交易服务连接失败"))
    
    return result

@router.get("/account", response_model=Dict)
async def get_account_info():
    """获取账户信息"""
    result = trading_service.get_account_info()
    
    if not result.get("success", False):
        raise HTTPException(status_code=400, detail=result.get("message", "获取账户信息失败"))
    
    return result

@router.get("/positions", response_model=Dict)
async def get_positions():
    """获取持仓信息"""
    result = trading_service.get_positions()
    
    if not result.get("success", False):
        raise HTTPException(status_code=400, detail=result.get("message", "获取持仓信息失败"))
    
    return result

@router.post("/orders", response_model=Dict)
async def place_order(request: OrderRequest):
    """下单"""
    result = trading_service.place_order(
        symbol=request.symbol,
        price=request.price,
        volume=request.volume,
        direction=request.direction,
        order_type=request.order_type
    )
    
    if not result.get("success", False):
        raise HTTPException(status_code=400, detail=result.get("message", "下单失败"))
    
    return result

@router.delete("/orders/{order_id}", response_model=Dict)
async def cancel_order(order_id: str):
    """撤单"""
    result = trading_service.cancel_order(order_id=order_id)
    
    if not result.get("success", False):
        raise HTTPException(status_code=400, detail=result.get("message", "撤单失败"))
    
    return result

@router.get("/orders", response_model=Dict)
async def get_orders(
    status: Optional[str] = Query(None, description="委托状态，不填表示查询全部"),
    start_date: Optional[str] = Query(None, description="开始日期，格式'YYYY-MM-DD'"),
    end_date: Optional[str] = Query(None, description="结束日期，格式'YYYY-MM-DD'")
):
    """获取委托列表"""
    # 过滤掉None值参数
    params = {}
    if status:
        params["status"] = status
    if start_date:
        params["start_date"] = start_date
    if end_date:
        params["end_date"] = end_date
    
    result = trading_service.get_orders(**params)
    
    if not result.get("success", False):
        raise HTTPException(status_code=400, detail=result.get("message", "获取委托列表失败"))
    
    return result

@router.get("/trades", response_model=Dict)
async def get_trades(
    start_date: Optional[str] = Query(None, description="开始日期，格式'YYYY-MM-DD'"),
    end_date: Optional[str] = Query(None, description="结束日期，格式'YYYY-MM-DD'")
):
    """获取成交列表"""
    # 过滤掉None值参数
    params = {}
    if start_date:
        params["start_date"] = start_date
    if end_date:
        params["end_date"] = end_date
    
    result = trading_service.get_trades(**params)
    
    if not result.get("success", False):
        raise HTTPException(status_code=400, detail=result.get("message", "获取成交列表失败"))
    
    return result

@router.get("/quotes", response_model=Dict)
async def get_realtime_quotes(symbols: str = Query(..., description="证券代码，多个代码用逗号分隔")):
    """获取实时行情"""
    symbol_list = [s.strip() for s in symbols.split(",") if s.strip()]
    
    if not symbol_list:
        raise HTTPException(status_code=400, detail="请提供有效的证券代码")
    
    result = trading_service.get_realtime_quotes(symbols=symbol_list)
    
    if not result.get("success", False):
        raise HTTPException(status_code=400, detail=result.get("message", "获取实时行情失败"))
    
    return result

@router.get("/balance/history")
async def get_balance_history(start_date: Optional[str] = None, end_date: Optional[str] = None):
    """获取账户余额历史变化记录"""
    try:
        # 设置默认日期范围为过去30天
        end_date_obj = datetime.now()
        if end_date:
            try:
                end_date_obj = datetime.strptime(end_date, "%Y-%m-%d")
            except ValueError:
                pass
        
        start_date_obj = end_date_obj - timedelta(days=30)
        if start_date:
            try:
                start_date_obj = datetime.strptime(start_date, "%Y-%m-%d")
            except ValueError:
                pass
        
        # 生成模拟数据
        balance_history = []
        
        # 生成每一天1-5条记录
        current_date = start_date_obj
        while current_date <= end_date_obj:
            # 每天生成1-5条记录
            for _ in range(random.randint(1, 5)):
                # 随机交易时间（9:30-15:00）
                trade_hour = random.randint(9, 14)
                trade_minute = random.randint(0, 59)
                if trade_hour == 9 and trade_minute < 30:
                    trade_minute = 30 + random.randint(0, 29)
                
                trade_time = current_date.replace(hour=trade_hour, minute=trade_minute)
                
                # 随机交易类型
                is_buy = random.random() > 0.5
                
                # 模拟股票数据
                stocks = [
                    {"symbol": "600519", "name": "贵州茅台", "price": 1826.50},
                    {"symbol": "000858", "name": "五粮液", "price": 185.20},
                    {"symbol": "601318", "name": "中国平安", "price": 45.67},
                    {"symbol": "600036", "name": "招商银行", "price": 38.22},
                    {"symbol": "000001", "name": "平安银行", "price": 12.75}
                ]
                
                # 随机选择股票
                stock = random.choice(stocks)
                
                # 随机交易量
                volume = random.randint(100, 1000)
                
                # 随机价格波动
                price_change = (random.random() - 0.5) * 0.05  # ±2.5%
                price = stock["price"] * (1 + price_change)
                
                # 计算交易金额
                amount = price * volume
                
                # 计算费用
                commission_rate = 0.0003  # 佣金费率
                transfer_fee_rate = 0.00002  # 过户费费率（上交所）
                stamp_duty_rate = 0.001  # 印花税（卖出时收取）
                
                commission = max(amount * commission_rate, 5)  # 佣金最低5元
                transfer_fee = 0
                if stock["symbol"].startswith("6"):  # 上海股票
                    transfer_fee = max(amount * transfer_fee_rate, 1)  # 过户费最低1元
                
                stamp_duty = 0
                if not is_buy:
                    stamp_duty = amount * stamp_duty_rate
                
                total_fee = commission + transfer_fee + stamp_duty
                
                # 计算余额变化
                balance_change = -amount - total_fee if is_buy else amount - total_fee
                
                # 生成记录
                balance_history.append({
                    "id": f"record_{len(balance_history) + 1}",
                    "time": int(trade_time.timestamp() * 1000),
                    "balance": balance_change,
                    "tradeId": f"trade_{int(trade_time.timestamp())}",
                    "type": "BUY" if is_buy else "SELL",
                    "symbol": stock["symbol"],
                    "name": stock["name"],
                    "price": round(price, 2),
                    "volume": volume,
                    "description": f"{'买入' if is_buy else '卖出'} {stock['name']}({stock['symbol']}) {volume}股",
                    "fees": {
                        "total": round(total_fee, 2),
                        "stampDuty": round(stamp_duty, 2),
                        "commission": round(commission, 2),
                        "transferFee": round(transfer_fee, 2)
                    }
                })
            
            # 下一天
            current_date += timedelta(days=1)
        
        # 按时间戳排序
        balance_history.sort(key=lambda x: x["time"], reverse=True)
        
        return {
            "success": True,
            "data": balance_history
        }
        
    except Exception as e:
        logging.error(f"获取余额历史失败: {str(e)}")
        return {
            "success": False,
            "message": str(e) or "获取余额历史失败"
        } 