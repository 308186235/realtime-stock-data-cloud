import unittest
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

from strategies.double_green_parallel_strategy import DoubleGreenParallelStrategy

class TestDoubleGreenParallelStrategy(unittest.TestCase):
    """双绿并行形策略测试"""
    
    def setUp(self):
        """测试初始化"""
        self.strategy = DoubleGreenParallelStrategy()
        
        # 创建测试数据
        self.create_test_data()
    
    def create_test_data(self):
        """创建用于测试的K线数据"""
        # 创建基本数据框架
        dates = [datetime.now() - timedelta(days=i) for i in range(20, 0, -1)]
        
        data = {
            'open': np.random.normal(10, 0.5, 20),
            'high': np.random.normal(10.5, 0.5, 20),
            'low': np.random.normal(9.5, 0.5, 20),
            'close': np.random.normal(10, 0.5, 20),
            'volume': np.random.randint(1000000, 5000000, 20)
        }
        
        self.df = pd.DataFrame(data, index=dates)
        
        # 修正high和low，确保high > max(open, close)，low < min(open, close)
        for i in range(len(self.df)):
            self.df.loc[self.df.index[i], 'high'] = max(self.df.loc[self.df.index[i], 'open'], 
                                                        self.df.loc[self.df.index[i], 'close']) + 0.2
            
            self.df.loc[self.df.index[i], 'low'] = min(self.df.loc[self.df.index[i], 'open'], 
                                                       self.df.loc[self.df.index[i], 'close']) - 0.2
        
        # 创建高位双绿并行形
        self.create_high_position_pattern()
        
        # 创建中继位置的双绿并行形
        self.create_middle_position_pattern()
        
        # 创建低位双绿并行形
        self.create_low_position_pattern()
    
    def create_high_position_pattern(self):
        """创建高位双绿并行形"""
        # 创建上涨趋势
        for i in range(5, 10):
            self.df.loc[self.df.index[i], 'open'] = 10 + i * 0.1
            self.df.loc[self.df.index[i], 'close'] = 10 + i * 0.1 + 0.2
            self.df.loc[self.df.index[i], 'high'] = self.df.loc[self.df.index[i], 'close'] + 0.1
            self.df.loc[self.df.index[i], 'low'] = self.df.loc[self.df.index[i], 'open'] - 0.1
        
        # 创建双绿并行形（两根阴线）
        # 第一根阴线
        i = 10
        self.df.loc[self.df.index[i], 'open'] = 11.2
        self.df.loc[self.df.index[i], 'close'] = 10.9
        self.df.loc[self.df.index[i], 'high'] = 11.3
        self.df.loc[self.df.index[i], 'low'] = 10.8
        
        # 第二根阴线
        i = 11
        self.df.loc[self.df.index[i], 'open'] = 11.19  # 与第一根的开盘价接近
        self.df.loc[self.df.index[i], 'close'] = 10.91  # 与第一根的收盘价接近
        self.df.loc[self.df.index[i], 'high'] = 11.25
        self.df.loc[self.df.index[i], 'low'] = 10.85
        
        # 增加成交量
        self.df.loc[self.df.index[11], 'volume'] = self.df.loc[self.df.index[10], 'volume'] * 1.5
    
    def create_middle_position_pattern(self):
        """创建中继位置的双绿并行形"""
        # 创建下跌趋势
        for i in range(12, 14):
            self.df.loc[self.df.index[i], 'open'] = 10.8 - (i-12) * 0.2
            self.df.loc[self.df.index[i], 'close'] = 10.6 - (i-12) * 0.2
            self.df.loc[self.df.index[i], 'high'] = self.df.loc[self.df.index[i], 'open'] + 0.1
            self.df.loc[self.df.index[i], 'low'] = self.df.loc[self.df.index[i], 'close'] - 0.1
        
        # 创建双绿并行形（两根阴线）
        # 第一根阴线
        i = 14
        self.df.loc[self.df.index[i], 'open'] = 10.3
        self.df.loc[self.df.index[i], 'close'] = 10.0
        self.df.loc[self.df.index[i], 'high'] = 10.4
        self.df.loc[self.df.index[i], 'low'] = 9.9
        
        # 第二根阴线
        i = 15
        self.df.loc[self.df.index[i], 'open'] = 10.29  # 与第一根的开盘价接近
        self.df.loc[self.df.index[i], 'close'] = 10.01  # 与第一根的收盘价接近
        self.df.loc[self.df.index[i], 'high'] = 10.35
        self.df.loc[self.df.index[i], 'low'] = 9.95
        
        # 增加成交量
        self.df.loc[self.df.index[15], 'volume'] = self.df.loc[self.df.index[14], 'volume'] * 1.3
    
    def create_low_position_pattern(self):
        """创建低位双绿并行形"""
        # 创建前期低位
        for i in range(0, 3):
            self.df.loc[self.df.index[i], 'open'] = 9.0 - i * 0.1
            self.df.loc[self.df.index[i], 'close'] = 8.8 - i * 0.1
            self.df.loc[self.df.index[i], 'high'] = self.df.loc[self.df.index[i], 'open'] + 0.1
            self.df.loc[self.df.index[i], 'low'] = self.df.loc[self.df.index[i], 'close'] - 0.1
        
        # 创建双绿并行形（两根阴线）
        # 第一根阴线
        i = 3
        self.df.loc[self.df.index[i], 'open'] = 8.7
        self.df.loc[self.df.index[i], 'close'] = 8.5
        self.df.loc[self.df.index[i], 'high'] = 8.8
        self.df.loc[self.df.index[i], 'low'] = 8.4
        
        # 第二根阴线
        i = 4
        self.df.loc[self.df.index[i], 'open'] = 8.71  # 与第一根的开盘价接近
        self.df.loc[self.df.index[i], 'close'] = 8.49  # 与第一根的收盘价接近
        self.df.loc[self.df.index[i], 'high'] = 8.79
        self.df.loc[self.df.index[i], 'low'] = 8.45
        
        # 减少成交量（缩量）
        self.df.loc[self.df.index[4], 'volume'] = self.df.loc[self.df.index[3], 'volume'] * 0.6
    
    def test_strategy_initialization(self):
        """测试策略初始化"""
        self.assertEqual(self.strategy.name, "双绿并行形策略")
        self.assertIsNotNone(self.strategy.description)
        
        # 检查默认参数
        default_params = self.strategy.get_default_parameters()
        self.assertIsNotNone(default_params)
        self.assertIn('parallel_threshold', default_params)
        self.assertIn('body_length_ratio', default_params)
        
        # 检查参数范围
        param_ranges = self.strategy.get_parameter_ranges()
        self.assertIsNotNone(param_ranges)
        self.assertIn('parallel_threshold', param_ranges)
    
    def test_signal_generation(self):
        """测试信号生成"""
        signals = self.strategy.generate_signals(self.df)
        
        # 验证信号是Series类型
        self.assertIsInstance(signals, pd.Series)
        
        # 验证信号长度与数据框一致
        self.assertEqual(len(signals), len(self.df))
        
        # 打印检测到的信号
        print("\n检测到的双绿并行形信号:")
        for i, signal in enumerate(signals):
            if signal != 0:
                print(f"位置 {i}, 日期 {self.df.index[i]}, 信号值 {signal}")
        
        # 验证高位双绿并行形信号
        self.assertEqual(signals[11], -1)  # 高位应该是卖出信号
        
        # 验证中继位置双绿并行形信号
        self.assertEqual(signals[15], -1)  # 中继位置应该是卖出信号
        
        # 验证低位双绿并行形信号
        self.assertEqual(signals[4], 1)    # 低位缩量应该是买入信号
    
    def test_different_parameters(self):
        """测试不同参数设置"""
        # 使用更严格的参数
        strict_params = {
            'parallel_threshold': 0.01,  # 更严格的平行度要求
            'body_length_ratio': 0.8,    # 更高的实体相似度要求
            'volume_increase_threshold': 0.5  # 更高的放量要求
        }
        
        strict_strategy = DoubleGreenParallelStrategy(strict_params)
        strict_signals = strict_strategy.generate_signals(self.df)
        
        print("\n使用严格参数检测到的信号:")
        for i, signal in enumerate(strict_signals):
            if signal != 0:
                print(f"位置 {i}, 日期 {self.df.index[i]}, 信号值 {signal}")
        
        # 使用宽松参数
        loose_params = {
            'parallel_threshold': 0.05,  # 更宽松的平行度要求
            'body_length_ratio': 0.6,    # 更低的实体相似度要求
            'volume_increase_threshold': 0.2  # 更低的放量要求
        }
        
        loose_strategy = DoubleGreenParallelStrategy(loose_params)
        loose_signals = loose_strategy.generate_signals(self.df)
        
        print("\n使用宽松参数检测到的信号:")
        for i, signal in enumerate(loose_signals):
            if signal != 0:
                print(f"位置 {i}, 日期 {self.df.index[i]}, 信号值 {signal}")
        
        # 验证参数影响检测结果
        strict_signal_count = (strict_signals != 0).sum()
        loose_signal_count = (loose_signals != 0).sum()
        
        print(f"\n严格参数检测到的信号数: {strict_signal_count}")
        print(f"宽松参数检测到的信号数: {loose_signal_count}")
        
        # 预期宽松参数会检测到更多信号
        self.assertLessEqual(strict_signal_count, loose_signal_count)
    
    def test_backtest(self):
        """测试回测功能"""
        backtest_result = self.strategy.backtest(self.df, initial_capital=10000.0)
        
        # 验证回测结果包含预期的字段
        self.assertIn('win_rate', backtest_result)
        self.assertIn('profit_factor', backtest_result)
        self.assertIn('sharpe_ratio', backtest_result)
        self.assertIn('total_return', backtest_result)
        self.assertIn('max_drawdown', backtest_result)
        self.assertIn('total_trades', backtest_result)
        
        print("\n回测结果:")
        for key, value in backtest_result.items():
            print(f"{key}: {value}")

if __name__ == "__main__":
    unittest.main() 