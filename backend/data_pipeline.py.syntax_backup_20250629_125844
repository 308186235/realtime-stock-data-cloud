import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class DataPipeline:
    def __init__(self):
        self.quality_metrics = {
            'processed_records': 0,
            'invalid_records': 0,
            'processing_time': timedelta(0)
        }

    def process_high_frequency_data(self, raw_data):
        """高频数据处理核心方法"""
        start_time = datetime.now()
        
        # 数据对齐与清洗
        df = self._align_timestamps(raw_data)
        df = self._remove_anomalies(df)
        df = self._add_derived_features(df)
        
        # 更新质量指标
        self.quality_metrics['processed_records'] += len(df)
        self.quality_metrics['processing_time'] += datetime.now() - start_time
        
        logger.info(f'Processed {len(df)} records, invalid: {self.quality_metrics["invalid_records"]}')
        return df

    def _align_timestamps(self, df):
        # 时间戳对齐到整秒
        df['timestamp'] = df['timestamp'].dt.floor('1s')
        return df.groupby('timestamp').last().reset_index()

    def _remove_anomalies(self, df):
        # 增强版异常检测
        
        # 基础有效性检查
        base_valid = (df['price'] > 0) & \\
                    (df['volume'] > 0) & \\
                    (df['bid'] < df['ask'])
        
        # 成交量突增检测(3倍标准差)
        volume_mean = df['volume'].rolling(100).mean()
        volume_std = df['volume'].rolling(100).std()
        volume_valid = df['volume'] < (volume_mean + 3 * volume_std)
        
        # 价格连续性检查(排除跳空缺口)
        price_change = df['price'].pct_change().abs()
        price_valid = price_change < 0.05  # 5%最大波动
        
        # 交易时间验证(仅限交易所活跃时段)
        time_valid = df['timestamp'].dt.time.between(
            pd.to_datetime('09:30').time(),
            pd.to_datetime('15:00').time()
        )
        
        combined_valid = base_valid & volume_valid & price_valid & time_valid
        
        self.quality_metrics['invalid_records'] += (~combined_valid).sum()
        return df[combined_valid]

    def _add_derived_features(self, df):
        # 添加衍生特征
        df['spread'] = df['ask'] - df['bid']
        df['mid_price'] = (df['ask'] + df['bid']) / 2
        
        # 滚动特征计算
        df['volatility'] = df['mid_price'].rolling(60).std()
        df['volume_imbalance'] = df['bid_volume'] / df['ask_volume']
        return df

    def get_quality_report(self):
        """生成数据质量报告"""
        return {
            '数据质量指标': {
                '处理记录数': self.quality_metrics['processed_records'],
                '无效记录数': self.quality_metrics['invalid_records'],
                '平均处理延迟': f"{self.quality_metrics['processing_time'] / self.quality_metrics['processed_records']} 秒/笔"
            },
            '最后更新时间': datetime.now().isoformat()
        }

实现高频数据处理管道,包含:
    - 毫秒级时间戳对齐
- 买卖价差异常过滤
- 波动率衍生指标计算
