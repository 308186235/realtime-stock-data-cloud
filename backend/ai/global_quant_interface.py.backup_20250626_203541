"""
全球量化策略接口 - 直接集成到现有Agent
"""

import numpy as np
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

async def get_global_quant_decision(symbol, prices, volumes=None):
    """全球顶级量化策略决策 - 供Agent直接调用"""
    try:
        if len(prices) < 20:
            return {"error": "数据不足"}
        
        if volumes is None:
            volumes = [1000000] * len(prices)  # 默认成交量
        
        period_return = (prices[-1] - prices[0]) / prices[0]
        
        # 多策略评分系统
        strategy_scores = {}
        
        # 1. Renaissance风格 - 统计套利
        renaissance_score = 0
        if len(prices) >= 20:
            ma20 = np.mean(prices[-20:])
            deviation = (prices[-1] - ma20) / ma20
            renaissance_score += -deviation * 100  # 均值回归
            
            # 价格自相关
            returns = [(prices[i] - prices[i-1]) / prices[i-1] for i in range(1, min(21, len(prices)))]
            if len(returns) > 2:
                try:
                    autocorr = np.corrcoef(returns[:-1], returns[1:])[0,1]
                    if not np.isnan(autocorr):
                        renaissance_score += autocorr * 50
                except:
                    pass
        
        strategy_scores['Renaissance'] = renaissance_score
        
        # 2. Two Sigma风格 - 机器学习
        twosigma_score = 0
        if len(prices) >= 30:
            # 多时间框架动量一致性
            momentum_signals = []
            for period in [3, 5, 10, 20]:
                if len(prices) >= period + 1:
                    momentum = (prices[-1] - prices[-period-1]) / prices[-period-1]
                    momentum_signals.append(1 if momentum > 0 else -1)
            
            if momentum_signals:
                consistency = np.mean(momentum_signals)
                twosigma_score += consistency * 35
        
        strategy_scores['TwoSigma'] = twosigma_score
        
        # 3. AQR风格 - 因子投资
        aqr_score = 0
        if len(prices) >= 60:
            # 质量因子
            price_stability = 1 / (1 + np.std(prices[-60:]) / np.mean(prices[-60:]))
            aqr_score += price_stability * 25
            
            # 价值因子
            price_range = max(prices[-60:]) - min(prices[-60:])
            if price_range > 0:
                price_percentile = (prices[-1] - min(prices[-60:])) / price_range
                aqr_score += (1 - price_percentile) * 20
        
        strategy_scores['AQR'] = aqr_score
        
        # 4. Citadel风格 - 多策略
        citadel_score = 0
        if len(volumes) >= 10:
            # 量价配合
            price_change = (prices[-1] - prices[-6]) / prices[-6] if len(prices) >= 6 else 0
            if len(volumes) >= 6:
                recent_vol = np.mean(volumes[-6:-1]) if len(volumes) > 6 else volumes[-1]
                volume_change = (volumes[-1] - recent_vol) / recent_vol if recent_vol > 0 else 0
                citadel_score += price_change * volume_change * 25
        
        strategy_scores['Citadel'] = citadel_score
        
        # 5. 期间表现加分
        performance_bonus = 0
        if period_return > 0.1:
            performance_bonus = 20
        elif period_return > 0.05:
            performance_bonus = 15
        elif period_return > 0:
            performance_bonus = 10
        elif period_return < -0.1:
            performance_bonus = -15
        
        # 加权综合评分
        weights = {'Renaissance': 0.25, 'TwoSigma': 0.25, 'AQR': 0.2, 'Citadel': 0.2}
        final_score = sum(strategy_scores[strategy] * weights[strategy] for strategy in weights) + performance_bonus
        
        # 决策逻辑 - 追求高质量胜率
        if final_score >= 20:
            decision = "强力做多"
            position_size = 0.8
            confidence = min(final_score / 30, 0.95)
            expected_win_rate = 0.75
        elif final_score >= 12:
            decision = "积极做多"
            position_size = 0.6
            confidence = final_score / 30
            expected_win_rate = 0.65
        elif final_score >= 6:
            decision = "谨慎做多"
            position_size = 0.4
            confidence = final_score / 30
            expected_win_rate = 0.55
        elif final_score >= 0:
            decision = "小仓位试探"
            position_size = 0.2
            confidence = final_score / 30
            expected_win_rate = 0.45
        else:
            decision = "空仓观望"
            position_size = 0
            confidence = 0
            expected_win_rate = 0.0
        
        return {
            "symbol": symbol,
            "timestamp": datetime.now().isoformat(),
            "final_score": final_score,
            "strategy_scores": strategy_scores,
            "decision": decision,
            "position_size": position_size,
            "confidence": confidence,
            "expected_win_rate": expected_win_rate,
            "performance_bonus": performance_bonus,
            "period_return": period_return,
            "global_quant_enabled": True
        }
        
    except Exception as e:
        logger.error(f"全球量化策略分析失败: {e}")
        return {"error": str(e)}

# 测试函数
def test_global_quant_integration():
    """测试全球量化策略集成"""
    print(" 测试Agent全球量化策略集成")
    print("=" * 50)
    
    # 模拟股票数据
    test_cases = [
        {
            "symbol": "000001.SZ",
            "prices": [10.0, 10.1, 10.2, 9.9, 10.3, 10.1, 10.4, 10.2, 10.5, 10.3,
                      10.6, 10.4, 10.7, 10.5, 10.8, 10.6, 10.9, 10.7, 11.0, 10.8,
                      11.1, 10.9, 11.2, 11.0, 11.3],
            "volumes": [1000000] * 25
        },
        {
            "symbol": "600519.SH", 
            "prices": [1800, 1820, 1810, 1790, 1780, 1770, 1760, 1750, 1740, 1730,
                      1720, 1710, 1700, 1690, 1680, 1670, 1660, 1650, 1640, 1630,
                      1620, 1610, 1600, 1590, 1580],
            "volumes": [500000] * 25
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n 测试案例 {i}: {test_case['symbol']}")
        
        import asyncio
        result = asyncio.run(get_global_quant_decision(
            test_case["symbol"], 
            test_case["prices"], 
            test_case["volumes"]
        ))
        
        if "error" not in result:
            print(f"  期间涨跌: {result['period_return']:.2%}")
            print(f"  综合评分: {result['final_score']:.1f}")
            print(f"  决策: {result['decision']}")
            print(f"  仓位: {result['position_size']:.1%}")
            print(f"  置信度: {result['confidence']:.2f}")
            print(f"  预期胜率: {result['expected_win_rate']:.1%}")
            print(f"  策略评分: {result['strategy_scores']}")
        else:
            print(f"   错误: {result['error']}")
    
    print(f"\n 全球量化策略集成测试完成！")
    print("现在可以在Agent中调用 get_global_quant_decision() 函数")

if __name__ == "__main__":
    test_global_quant_integration()
